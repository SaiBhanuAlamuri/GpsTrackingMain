{"ast":null,"code":"var _jsxFileName = \"C:\\\\Desktop\\\\gpsproject_frontend-main\\\\src\\\\components\\\\roadmap.js\";\nimport React, { useState } from \"react\";\nimport \"./Alldummy.css\";\n\nconst Roadmap = ({\n  steps\n}) => {\n  const [hoveredIndex, setHoveredIndex] = useState(null);\n\n  const calculateFontSize = text => {\n    const baseFontSize = 16; // Base font size in pixels\n\n    const maxChars = 10; // Maximum characters to fit\n\n    if (text.length > maxChars) {\n      const scaleFactor = Math.max(0.5, maxChars / text.length);\n      return `${baseFontSize * scaleFactor}px`;\n    }\n\n    return `${baseFontSize}px`;\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"roadmap-container1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 9\n    }\n  }, steps.length > 0 ? steps.map((step, index) => /*#__PURE__*/React.createElement(React.Fragment, {\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: `roadmap-step ${index % 2 === 0 ? \"up\" : \"down\"}`,\n    onMouseEnter: () => setHoveredIndex(index),\n    onMouseLeave: () => setHoveredIndex(null),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"icon\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    className: \"fa-solid fa-bus\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 33\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"step-info\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      fontSize: calculateFontSize(step.stopname)\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 29\n    }\n  }, step.stopname || \"Stop Name\"), hoveredIndex === index && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"popup\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 41\n    }\n  }, \"Time: \", step.stoptime || \"Time Unavailable\")))), index < steps.length - 1 && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"roadmap-connector\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"svg\", {\n    viewBox: \"0 0 200 100\",\n    preserveAspectRatio: \"none\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: `M0,${index % 2 === 0 ? \"100\" : \"0\"} C100,${index % 2 === 0 ? \"0\" : \"100\"} 100,${index % 2 === 0 ? \"100\" : \"0\"} 200,${index % 2 === 0 ? \"0\" : \"100\"}`,\n    className: \"connector-path\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 37\n    }\n  }))))) : /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 17\n    }\n  }, \"No stops available\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"end-arrow\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default Roadmap;","map":{"version":3,"sources":["C:/Desktop/gpsproject_frontend-main/src/components/roadmap.js"],"names":["React","useState","Roadmap","steps","hoveredIndex","setHoveredIndex","calculateFontSize","text","baseFontSize","maxChars","length","scaleFactor","Math","max","map","step","index","fontSize","stopname","stoptime"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport \"./Alldummy.css\";\n\nconst Roadmap = ({ steps }) => {\n    const [hoveredIndex, setHoveredIndex] = useState(null);\n    const calculateFontSize = (text) => {\n        const baseFontSize = 16; // Base font size in pixels\n        const maxChars = 10; // Maximum characters to fit\n    \n        if (text.length > maxChars) {\n            const scaleFactor = Math.max(0.5, (maxChars / text.length));\n            return `${baseFontSize * scaleFactor}px`;\n        }\n        return `${baseFontSize}px`;\n    };\n    \n\n\n    return (\n        <div className=\"roadmap-container1\">\n            {steps.length > 0 ? (\n                steps.map((step, index) => (\n                    <React.Fragment key={index}>\n                        <div\n                            className={`roadmap-step ${index % 2 === 0 ? \"up\" : \"down\"}`}\n                            onMouseEnter={() => setHoveredIndex(index)}\n                            onMouseLeave={() => setHoveredIndex(null)}\n                        >\n                            <div className=\"icon\">\n                                <i className=\"fa-solid fa-bus\"></i>\n                            </div>\n                            <div className=\"step-info\">\n                            <p style={{ fontSize: calculateFontSize(step.stopname) }}>{step.stopname || \"Stop Name\"}</p>\n                                {hoveredIndex === index && (\n                                    <div className=\"popup\">\n                                        <p>Time: {step.stoptime || \"Time Unavailable\"}</p>\n                                    </div>\n                                )}\n                            </div>\n                        </div>\n                        {index < steps.length - 1 && (\n                            <div className=\"roadmap-connector\">\n                                <svg viewBox=\"0 0 200 100\" preserveAspectRatio=\"none\">\n                                    <path\n                                        d={`M0,${index % 2 === 0 ? \"100\" : \"0\"} C100,${index % 2 === 0 ? \"0\" : \"100\"} 100,${index % 2 === 0 ? \"100\" : \"0\"} 200,${index % 2 === 0 ? \"0\" : \"100\"}`}\n                                        className=\"connector-path\"\n                                    ></path>\n                                </svg>\n                            </div>\n                        )}\n                    </React.Fragment>\n                ))\n            ) : (\n                <p>No stops available</p>\n            )}\n            <div className=\"end-arrow\"></div>\n        </div>\n    );\n};\n\nexport default Roadmap;\n"]},"metadata":{},"sourceType":"module"}