{"ast":null,"code":"var _jsxFileName = \"C:\\\\Desktop\\\\gpsproject_frontend-main\\\\src\\\\components\\\\track.js\";\n// import React, { useRef, useState, useEffect } from \"react\";\n// import { useJsApiLoader, GoogleMap, Marker, DirectionsRenderer } from \"@react-google-maps/api\";\n// import { FaLocationArrow, FaTimes } from 'react-icons/fa';\n// import './Alldummy.css';\n// const center = { lat: 17.08959447599296, lng: 82.06681022400967 };\n// const libraries = ['places'];\n// const Track = ({ onLiveTracking, origin, destination }) => {\n//     const { isLoaded } = useJsApiLoader({\n//         googleMapsApiKey: \"AIzaSyCSkMcv8BF3Sxv8ugdVIBxxDs8exC8gDW0\",\n//         libraries,\n//     });\n//     const [directionResponse, setDirectionResponse] = useState(null);\n//     const [distance, setDistance] = useState('');\n//     const [duration, setDuration] = useState('');\n//     const mapRef = useRef(null);\n//     useEffect(() => {\n//         if (origin && destination && isLoaded) {\n//             calculateRoute(origin, destination);\n//         }\n//     }, [origin, destination, isLoaded]);\n//     if (!isLoaded) {\n//         return <div>Loading...</div>;\n//     }\n//     async function calculateRoute(originAddress, destinationAddress) {\n//         if (!window.google) {\n//             console.error(\"Google Maps API is not loaded.\");\n//             return;\n//         }\n//         const directionService = new window.google.maps.DirectionsService();\n//         const results = await directionService.route({\n//             origin: originAddress,\n//             destination: destinationAddress,\n//             travelMode: window.google.maps.TravelMode.DRIVING,\n//         });\n//         setDirectionResponse(results);\n//         setDistance(results.routes[0].legs[0].distance.text);\n//         setDuration(results.routes[0].legs[0].duration.text);\n//     }\n//     function clearRoute() {\n//         setDirectionResponse(null);\n//         setDistance('');\n//         setDuration('');\n//     }\n//     return (\n//         <div className=\"container1\">\n//             <div className=\"mapContainer\">\n//                 <GoogleMap\n//                     center={center}\n//                     zoom={15}\n//                     mapContainerStyle={{ width: '100%', height: '100%' }}\n//                     onLoad={map => (mapRef.current = map)}\n//                     options={{\n//                         zoomControl:true,\n//                         streetViewControl: false,\n//                         mapTypeControl: false,\n//                         fullscreenControl: false,\n//                     }}\n//                 >\n//                     <Marker position={center} />\n//                     {directionResponse && <DirectionsRenderer directions={directionResponse} />}\n//                 </GoogleMap>\n//             </div>\n//             <div className=\"mapOptions\">\n//                 <button onClick={clearRoute} className=\"clearButton\">\n//                     <FaTimes size={20} />\n//                 </button>\n//                 <div className=\"info\">\n//                     <div className=\"placeInfo\">\n//                         <h4>Route Information</h4>\n//                         <p><strong>Origin:</strong> {origin || \"Not Specified\"}</p>\n//                         <p><strong>Destination:</strong> {destination || \"Not Specified\"}</p>\n//                         <p><strong>Distance:</strong> {distance || \"Not Calculated\"}</p>\n//                         <p><strong>Duration:</strong> {duration || \"Not Calculated\"}</p>\n//                     </div>\n//                 </div>\n//                 <button onClick={() => mapRef.current?.panTo(center)} className=\"locationButton\">\n//                     <FaLocationArrow size={20} />\n//                 </button>\n//             </div>\n//             <button className=\"liveTrackingButton\" onClick={onLiveTracking}>\n//                 Live Tracking\n//             </button>\n//         </div>\n//     );\n// };\n// export default Track;\nimport React, { useRef, useState, useEffect } from \"react\";\nimport { useJsApiLoader, GoogleMap, Marker, DirectionsRenderer } from \"@react-google-maps/api\";\nimport { FaLocationArrow, FaTimes } from 'react-icons/fa';\nimport './Alldummy.css';\nconst center = {\n  lat: 17.08959447599296,\n  lng: 82.06681022400967\n};\nconst libraries = ['places'];\n\nconst Track = ({\n  onLiveTracking,\n  origin,\n  destination\n}) => {\n  const {\n    isLoaded\n  } = useJsApiLoader({\n    googleMapsApiKey: \"YOUR_NEW_API_KEY\",\n    // ðŸ”‘ Replace with new API key\n    libraries\n  });\n  const [directionResponse, setDirectionResponse] = useState(null);\n  const [distance, setDistance] = useState('');\n  const [duration, setDuration] = useState('');\n  const mapRef = useRef(null);\n  useEffect(() => {\n    if (origin && destination && isLoaded) {\n      calculateRoute(origin, destination);\n    }\n  }, [origin, destination, isLoaded]);\n\n  if (!isLoaded) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 16\n      }\n    }, \"Loading...\");\n  }\n\n  async function calculateRoute(originAddress, destinationAddress) {\n    if (!window.google) {\n      console.error(\"Google Maps API is not loaded.\");\n      return;\n    }\n\n    const directionService = new window.google.maps.DirectionsService();\n\n    try {\n      var _results$routes;\n\n      const results = await directionService.route({\n        origin: originAddress,\n        destination: destinationAddress,\n        travelMode: window.google.maps.TravelMode.DRIVING\n      });\n\n      if ((results === null || results === void 0 ? void 0 : (_results$routes = results.routes) === null || _results$routes === void 0 ? void 0 : _results$routes.length) > 0) {\n        setDirectionResponse(results);\n        setDistance(results.routes[0].legs[0].distance.text);\n        setDuration(results.routes[0].legs[0].duration.text);\n      } else {\n        console.error(\"No routes found\", results);\n        setDirectionResponse(null);\n        setDistance(\"Not Calculated\");\n        setDuration(\"Not Calculated\");\n      }\n    } catch (error) {\n      console.error(\"Error fetching directions:\", error);\n      setDirectionResponse(null);\n      setDistance(\"Error\");\n      setDuration(\"Error\");\n    }\n  }\n\n  function clearRoute() {\n    setDirectionResponse(null);\n    setDistance('');\n    setDuration('');\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mapContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(GoogleMap, {\n    center: center,\n    zoom: 15,\n    mapContainerStyle: {\n      width: '100%',\n      height: '100%'\n    },\n    onLoad: map => mapRef.current = map,\n    options: {\n      zoomControl: true,\n      streetViewControl: false,\n      mapTypeControl: false,\n      fullscreenControl: false\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Marker, {\n    position: center,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 21\n    }\n  }), directionResponse && /*#__PURE__*/React.createElement(DirectionsRenderer, {\n    directions: directionResponse,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 43\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mapOptions\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: clearRoute,\n    className: \"clearButton\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(FaTimes, {\n    size: 20,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"info\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"placeInfo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 25\n    }\n  }, \"Route Information\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 28\n    }\n  }, \"Origin:\"), \" \", origin || \"Not Specified\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 28\n    }\n  }, \"Destination:\"), \" \", destination || \"Not Specified\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 28\n    }\n  }, \"Distance:\"), \" \", distance || \"Not Calculated\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 28\n    }\n  }, \"Duration:\"), \" \", duration || \"Not Calculated\"))), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => {\n      var _mapRef$current;\n\n      return (_mapRef$current = mapRef.current) === null || _mapRef$current === void 0 ? void 0 : _mapRef$current.panTo(center);\n    },\n    className: \"locationButton\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(FaLocationArrow, {\n    size: 20,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 21\n    }\n  }))), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"liveTrackingButton\",\n    onClick: onLiveTracking,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 13\n    }\n  }, \"Live Tracking\"));\n};\n\nexport default Track;","map":{"version":3,"sources":["C:/Desktop/gpsproject_frontend-main/src/components/track.js"],"names":["React","useRef","useState","useEffect","useJsApiLoader","GoogleMap","Marker","DirectionsRenderer","FaLocationArrow","FaTimes","center","lat","lng","libraries","Track","onLiveTracking","origin","destination","isLoaded","googleMapsApiKey","directionResponse","setDirectionResponse","distance","setDistance","duration","setDuration","mapRef","calculateRoute","originAddress","destinationAddress","window","google","console","error","directionService","maps","DirectionsService","results","route","travelMode","TravelMode","DRIVING","routes","length","legs","text","clearRoute","width","height","map","current","zoomControl","streetViewControl","mapTypeControl","fullscreenControl","panTo"],"mappings":"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","sourcesContent":["// import React, { useRef, useState, useEffect } from \"react\";\n// import { useJsApiLoader, GoogleMap, Marker, DirectionsRenderer } from \"@react-google-maps/api\";\n// import { FaLocationArrow, FaTimes } from 'react-icons/fa';\n// import './Alldummy.css';\n\n// const center = { lat: 17.08959447599296, lng: 82.06681022400967 };\n// const libraries = ['places'];\n\n// const Track = ({ onLiveTracking, origin, destination }) => {\n//     const { isLoaded } = useJsApiLoader({\n//         googleMapsApiKey: \"AIzaSyCSkMcv8BF3Sxv8ugdVIBxxDs8exC8gDW0\",\n//         libraries,\n//     });\n\n//     const [directionResponse, setDirectionResponse] = useState(null);\n//     const [distance, setDistance] = useState('');\n//     const [duration, setDuration] = useState('');\n\n//     const mapRef = useRef(null);\n\n//     useEffect(() => {\n//         if (origin && destination && isLoaded) {\n//             calculateRoute(origin, destination);\n//         }\n//     }, [origin, destination, isLoaded]);\n\n//     if (!isLoaded) {\n//         return <div>Loading...</div>;\n//     }\n\n//     async function calculateRoute(originAddress, destinationAddress) {\n//         if (!window.google) {\n//             console.error(\"Google Maps API is not loaded.\");\n//             return;\n//         }\n\n//         const directionService = new window.google.maps.DirectionsService();\n//         const results = await directionService.route({\n//             origin: originAddress,\n//             destination: destinationAddress,\n//             travelMode: window.google.maps.TravelMode.DRIVING,\n//         });\n\n//         setDirectionResponse(results);\n//         setDistance(results.routes[0].legs[0].distance.text);\n//         setDuration(results.routes[0].legs[0].duration.text);\n//     }\n\n//     function clearRoute() {\n//         setDirectionResponse(null);\n//         setDistance('');\n//         setDuration('');\n//     }\n\n//     return (\n//         <div className=\"container1\">\n//             <div className=\"mapContainer\">\n//                 <GoogleMap\n//                     center={center}\n//                     zoom={15}\n//                     mapContainerStyle={{ width: '100%', height: '100%' }}\n//                     onLoad={map => (mapRef.current = map)}\n//                     options={{\n//                         zoomControl:true,\n//                         streetViewControl: false,\n//                         mapTypeControl: false,\n//                         fullscreenControl: false,\n//                     }}\n//                 >\n//                     <Marker position={center} />\n//                     {directionResponse && <DirectionsRenderer directions={directionResponse} />}\n//                 </GoogleMap>\n//             </div>\n\n//             <div className=\"mapOptions\">\n//                 <button onClick={clearRoute} className=\"clearButton\">\n//                     <FaTimes size={20} />\n//                 </button>\n\n//                 <div className=\"info\">\n//                     <div className=\"placeInfo\">\n//                         <h4>Route Information</h4>\n//                         <p><strong>Origin:</strong> {origin || \"Not Specified\"}</p>\n//                         <p><strong>Destination:</strong> {destination || \"Not Specified\"}</p>\n//                         <p><strong>Distance:</strong> {distance || \"Not Calculated\"}</p>\n//                         <p><strong>Duration:</strong> {duration || \"Not Calculated\"}</p>\n//                     </div>\n//                 </div>\n\n//                 <button onClick={() => mapRef.current?.panTo(center)} className=\"locationButton\">\n//                     <FaLocationArrow size={20} />\n//                 </button>\n//             </div>\n\n//             <button className=\"liveTrackingButton\" onClick={onLiveTracking}>\n//                 Live Tracking\n//             </button>\n//         </div>\n//     );\n// };\n\n// export default Track;\n\nimport React, { useRef, useState, useEffect } from \"react\";\nimport { useJsApiLoader, GoogleMap, Marker, DirectionsRenderer } from \"@react-google-maps/api\";\nimport { FaLocationArrow, FaTimes } from 'react-icons/fa';\nimport './Alldummy.css';\n\nconst center = { lat: 17.08959447599296, lng: 82.06681022400967 };\nconst libraries = ['places'];\n\nconst Track = ({ onLiveTracking, origin, destination }) => {\n    const { isLoaded } = useJsApiLoader({\n        googleMapsApiKey: \"YOUR_NEW_API_KEY\", // ðŸ”‘ Replace with new API key\n        libraries,\n    });\n\n    const [directionResponse, setDirectionResponse] = useState(null);\n    const [distance, setDistance] = useState('');\n    const [duration, setDuration] = useState('');\n\n    const mapRef = useRef(null);\n\n    useEffect(() => {\n        if (origin && destination && isLoaded) {\n            calculateRoute(origin, destination);\n        }\n    }, [origin, destination, isLoaded]);\n\n    if (!isLoaded) {\n        return <div>Loading...</div>;\n    }\n\n    async function calculateRoute(originAddress, destinationAddress) {\n        if (!window.google) {\n            console.error(\"Google Maps API is not loaded.\");\n            return;\n        }\n\n        const directionService = new window.google.maps.DirectionsService();\n\n        try {\n            const results = await directionService.route({\n                origin: originAddress,\n                destination: destinationAddress,\n                travelMode: window.google.maps.TravelMode.DRIVING,\n            });\n\n            if (results?.routes?.length > 0) {\n                setDirectionResponse(results);\n                setDistance(results.routes[0].legs[0].distance.text);\n                setDuration(results.routes[0].legs[0].duration.text);\n            } else {\n                console.error(\"No routes found\", results);\n                setDirectionResponse(null);\n                setDistance(\"Not Calculated\");\n                setDuration(\"Not Calculated\");\n            }\n        } catch (error) {\n            console.error(\"Error fetching directions:\", error);\n            setDirectionResponse(null);\n            setDistance(\"Error\");\n            setDuration(\"Error\");\n        }\n    }\n\n    function clearRoute() {\n        setDirectionResponse(null);\n        setDistance('');\n        setDuration('');\n    }\n\n    return (\n        <div className=\"container1\">\n            <div className=\"mapContainer\">\n                <GoogleMap\n                    center={center}\n                    zoom={15}\n                    mapContainerStyle={{ width: '100%', height: '100%' }}\n                    onLoad={map => (mapRef.current = map)}\n                    options={{\n                        zoomControl:true,\n                        streetViewControl: false,\n                        mapTypeControl: false,\n                        fullscreenControl: false,\n                    }}\n                >\n                    <Marker position={center} />\n                    {directionResponse && <DirectionsRenderer directions={directionResponse} />}\n                </GoogleMap>\n            </div>\n\n            <div className=\"mapOptions\">\n                <button onClick={clearRoute} className=\"clearButton\">\n                    <FaTimes size={20} />\n                </button>\n\n                <div className=\"info\">\n                    <div className=\"placeInfo\">\n                        <h4>Route Information</h4>\n                        <p><strong>Origin:</strong> {origin || \"Not Specified\"}</p>\n                        <p><strong>Destination:</strong> {destination || \"Not Specified\"}</p>\n                        <p><strong>Distance:</strong> {distance || \"Not Calculated\"}</p>\n                        <p><strong>Duration:</strong> {duration || \"Not Calculated\"}</p>\n                    </div>\n                </div>\n\n                <button onClick={() => mapRef.current?.panTo(center)} className=\"locationButton\">\n                    <FaLocationArrow size={20} />\n                </button>\n            </div>\n\n            <button className=\"liveTrackingButton\" onClick={onLiveTracking}>\n                Live Tracking\n            </button>\n        </div>\n    );\n};\n\nexport default Track;\n"]},"metadata":{},"sourceType":"module"}