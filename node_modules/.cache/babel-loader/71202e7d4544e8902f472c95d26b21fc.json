{"ast":null,"code":"// import React, { useRef, useState, useEffect } from \"react\";\n// import { useJsApiLoader, GoogleMap, Marker, DirectionsRenderer } from \"@react-google-maps/api\";\n// import { FaLocationArrow, FaTimes } from 'react-icons/fa';\n// import './Alldummy.css';\n// const center = { lat: 17.08959447599296, lng: 82.06681022400967 };\n// const libraries = ['places'];\n// const Track = ({ onLiveTracking, origin, destination }) => {\n//     const { isLoaded } = useJsApiLoader({\n//         googleMapsApiKey: \"AIzaSyCSkMcv8BF3Sxv8ugdVIBxxDs8exC8gDW0\",\n//         libraries,\n//     });\n//     const [directionResponse, setDirectionResponse] = useState(null);\n//     const [distance, setDistance] = useState('');\n//     const [duration, setDuration] = useState('');\n//     const mapRef = useRef(null);\n//     useEffect(() => {\n//         if (origin && destination && isLoaded) {\n//             calculateRoute(origin, destination);\n//         }\n//     }, [origin, destination, isLoaded]);\n//     if (!isLoaded) {\n//         return <div>Loading...</div>;\n//     }\n//     async function calculateRoute(originAddress, destinationAddress) {\n//         if (!window.google) {\n//             console.error(\"Google Maps API is not loaded.\");\n//             return;\n//         }\n//         const directionService = new window.google.maps.DirectionsService();\n//         const results = await directionService.route({\n//             origin: originAddress,\n//             destination: destinationAddress,\n//             travelMode: window.google.maps.TravelMode.DRIVING,\n//         });\n//         setDirectionResponse(results);\n//         setDistance(results.routes[0].legs[0].distance.text);\n//         setDuration(results.routes[0].legs[0].duration.text);\n//     }\n//     function clearRoute() {\n//         setDirectionResponse(null);\n//         setDistance('');\n//         setDuration('');\n//     }\n//     return (\n//         <div className=\"container1\">\n//             <div className=\"mapContainer\">\n//                 <GoogleMap\n//                     center={center}\n//                     zoom={15}\n//                     mapContainerStyle={{ width: '100%', height: '100%' }}\n//                     onLoad={map => (mapRef.current = map)}\n//                     options={{\n//                         zoomControl:true,\n//                         streetViewControl: false,\n//                         mapTypeControl: false,\n//                         fullscreenControl: false,\n//                     }}\n//                 >\n//                     <Marker position={center} />\n//                     {directionResponse && <DirectionsRenderer directions={directionResponse} />}\n//                 </GoogleMap>\n//             </div>\n//             <div className=\"mapOptions\">\n//                 <button onClick={clearRoute} className=\"clearButton\">\n//                     <FaTimes size={20} />\n//                 </button>\n//                 <div className=\"info\">\n//                     <div className=\"placeInfo\">\n//                         <h4>Route Information</h4>\n//                         <p><strong>Origin:</strong> {origin || \"Not Specified\"}</p>\n//                         <p><strong>Destination:</strong> {destination || \"Not Specified\"}</p>\n//                         <p><strong>Distance:</strong> {distance || \"Not Calculated\"}</p>\n//                         <p><strong>Duration:</strong> {duration || \"Not Calculated\"}</p>\n//                     </div>\n//                 </div>\n//                 <button onClick={() => mapRef.current?.panTo(center)} className=\"locationButton\">\n//                     <FaLocationArrow size={20} />\n//                 </button>\n//             </div>\n//             <button className=\"liveTrackingButton\" onClick={onLiveTracking}>\n//                 Live Tracking\n//             </button>\n//         </div>\n//     );\n// };\n// export default Track;","map":{"version":3,"sources":["C:/Desktop/gpsproject_frontend-main/src/components/track.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["// import React, { useRef, useState, useEffect } from \"react\";\n// import { useJsApiLoader, GoogleMap, Marker, DirectionsRenderer } from \"@react-google-maps/api\";\n// import { FaLocationArrow, FaTimes } from 'react-icons/fa';\n// import './Alldummy.css';\n\n// const center = { lat: 17.08959447599296, lng: 82.06681022400967 };\n// const libraries = ['places'];\n\n// const Track = ({ onLiveTracking, origin, destination }) => {\n//     const { isLoaded } = useJsApiLoader({\n//         googleMapsApiKey: \"AIzaSyCSkMcv8BF3Sxv8ugdVIBxxDs8exC8gDW0\",\n//         libraries,\n//     });\n\n//     const [directionResponse, setDirectionResponse] = useState(null);\n//     const [distance, setDistance] = useState('');\n//     const [duration, setDuration] = useState('');\n\n//     const mapRef = useRef(null);\n\n//     useEffect(() => {\n//         if (origin && destination && isLoaded) {\n//             calculateRoute(origin, destination);\n//         }\n//     }, [origin, destination, isLoaded]);\n\n//     if (!isLoaded) {\n//         return <div>Loading...</div>;\n//     }\n\n//     async function calculateRoute(originAddress, destinationAddress) {\n//         if (!window.google) {\n//             console.error(\"Google Maps API is not loaded.\");\n//             return;\n//         }\n\n//         const directionService = new window.google.maps.DirectionsService();\n//         const results = await directionService.route({\n//             origin: originAddress,\n//             destination: destinationAddress,\n//             travelMode: window.google.maps.TravelMode.DRIVING,\n//         });\n\n//         setDirectionResponse(results);\n//         setDistance(results.routes[0].legs[0].distance.text);\n//         setDuration(results.routes[0].legs[0].duration.text);\n//     }\n\n//     function clearRoute() {\n//         setDirectionResponse(null);\n//         setDistance('');\n//         setDuration('');\n//     }\n\n//     return (\n//         <div className=\"container1\">\n//             <div className=\"mapContainer\">\n//                 <GoogleMap\n//                     center={center}\n//                     zoom={15}\n//                     mapContainerStyle={{ width: '100%', height: '100%' }}\n//                     onLoad={map => (mapRef.current = map)}\n//                     options={{\n//                         zoomControl:true,\n//                         streetViewControl: false,\n//                         mapTypeControl: false,\n//                         fullscreenControl: false,\n//                     }}\n//                 >\n//                     <Marker position={center} />\n//                     {directionResponse && <DirectionsRenderer directions={directionResponse} />}\n//                 </GoogleMap>\n//             </div>\n\n//             <div className=\"mapOptions\">\n//                 <button onClick={clearRoute} className=\"clearButton\">\n//                     <FaTimes size={20} />\n//                 </button>\n\n//                 <div className=\"info\">\n//                     <div className=\"placeInfo\">\n//                         <h4>Route Information</h4>\n//                         <p><strong>Origin:</strong> {origin || \"Not Specified\"}</p>\n//                         <p><strong>Destination:</strong> {destination || \"Not Specified\"}</p>\n//                         <p><strong>Distance:</strong> {distance || \"Not Calculated\"}</p>\n//                         <p><strong>Duration:</strong> {duration || \"Not Calculated\"}</p>\n//                     </div>\n//                 </div>\n\n//                 <button onClick={() => mapRef.current?.panTo(center)} className=\"locationButton\">\n//                     <FaLocationArrow size={20} />\n//                 </button>\n//             </div>\n\n//             <button className=\"liveTrackingButton\" onClick={onLiveTracking}>\n//                 Live Tracking\n//             </button>\n//         </div>\n//     );\n// };\n\n// export default Track;\n"]},"metadata":{},"sourceType":"module"}